<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>ZIP NETWORK // 5317 CHARLOTTE</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <style>
    :root {
      --bg: #000;
      --fg: #0f0;
      --accent: #ff0;
      --warn: #f00;
      --panel: #0a0a0a;
      --border: #0f0;
    }
    
    * { box-sizing: border-box; margin: 0; padding: 0; }
    
    body {
      background: var(--bg);
      color: var(--fg);
      font: 11px 'Courier New', monospace;
      overflow: hidden;
      height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .header {
      text-align: center;
      padding: 12px;
      border-bottom: 2px solid var(--border);
      background: var(--panel);
      z-index: 1000;
    }
    
    .header h1 {
      font-size: 18px;
      letter-spacing: 6px;
      color: var(--fg);
      text-shadow: 0 0 10px var(--fg);
    }
    
    .header .subtitle {
      font-size: 9px;
      color: var(--accent);
      letter-spacing: 3px;
      margin-top: 4px;
    }
    
    .intro-ticker {
      background: var(--panel);
      border-bottom: 2px solid var(--border);
      padding: 12px 0;
      overflow: hidden;
      box-shadow: inset 0 0 20px rgba(0, 255, 0, 0.1);
    }
    
    .intro-ticker-content {
      display: inline-block;
      white-space: nowrap;
      padding-left: 100%;
      animation: scroll-left 30s linear infinite;
      font-size: 12px;
      color: var(--fg);
      letter-spacing: 2px;
      text-transform: uppercase;
    }
    
    @keyframes scroll-left {
      0% { transform: translateX(0); }
      100% { transform: translateX(-100%); }
    }
    
    .main-container {
      display: flex;
      flex: 1;
      overflow: hidden;
    }
    
    .map-section {
      flex: 1;
      position: relative;
      background: var(--panel);
      border-right: 2px solid var(--border);
    }
    
    #map {
      width: 100%;
      height: 100%;
      background: #000;
    }
    
    .leaflet-tile-pane {
      filter: hue-rotate(80deg) saturate(2) brightness(1.5) contrast(1.2);
    }
    
    .leaflet-popup-content-wrapper {
      background: rgba(10, 10, 10, 0.95);
      color: var(--fg);
      border: 2px solid var(--fg);
      font-family: 'Courier New', monospace;
      box-shadow: 0 0 20px rgba(0, 255, 0, 0.5);
    }
    
    .leaflet-popup-content {
      margin: 8px;
      font-size: 11px;
    }
    
    .leaflet-popup-tip {
      background: rgba(10, 10, 10, 0.95);
      border: 2px solid var(--fg);
    }
    
    .leaflet-tooltip {
      background: rgba(255, 0, 0, 0.95);
      color: #fff;
      border: 2px solid #f00;
      font-family: 'Courier New', monospace;
      font-size: 10px;
      font-weight: bold;
      letter-spacing: 1px;
      padding: 4px 8px;
      box-shadow: 0 0 15px rgba(255, 0, 0, 0.8);
      text-transform: uppercase;
    }
    
    .side-panel {
      width: 320px;
      display: flex;
      flex-direction: column;
      background: var(--bg);
      z-index: 1001;
    }
    
    .control-section {
      padding: 15px;
      border-bottom: 2px solid var(--border);
      background: var(--panel);
    }
    
    .control-title {
      font-size: 10px;
      color: var(--accent);
      letter-spacing: 2px;
      margin-bottom: 12px;
      text-transform: uppercase;
    }
    
    .control-item {
      margin-bottom: 10px;
    }
    
    .control-item label {
      display: flex;
      align-items: center;
      font-size: 10px;
      cursor: pointer;
    }
    
    .control-item input[type="checkbox"] {
      margin-right: 8px;
      accent-color: var(--fg);
    }
    
    .slider-container {
      margin: 10px 0;
    }
    
    .slider-container label {
      display: block;
      font-size: 9px;
      margin-bottom: 5px;
    }
    
    .slider-container input[type="range"] {
      width: 100%;
      accent-color: var(--fg);
    }
    
    .radar-info {
      font-size: 9px;
      color: #888;
      margin-top: 10px;
      padding-top: 10px;
      border-top: 1px solid var(--border);
    }
    
    .stats-panel {
      padding: 15px;
      border-bottom: 2px solid var(--border);
      background: var(--panel);
    }
    
    .stat-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
      font-size: 10px;
    }
    
    .stat-label { color: #888; }
    .stat-value { color: var(--fg); font-weight: bold; }
    
    .zip-list {
      flex: 1;
      overflow-y: auto;
      padding: 10px;
    }
    
    .list-title {
      font-size: 10px;
      color: var(--accent);
      letter-spacing: 2px;
      margin-bottom: 10px;
      text-transform: uppercase;
    }
    
    .zip-item {
      padding: 6px 8px;
      margin-bottom: 4px;
      background: var(--panel);
      border-left: 2px solid var(--fg);
      font-size: 10px;
      display: flex;
      justify-content: space-between;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .zip-item:hover {
      background: rgba(0, 255, 0, 0.1);
      border-left-width: 4px;
    }
    
    .zip-item.target {
      border-left-color: var(--warn);
      background: rgba(255, 0, 0, 0.1);
    }
    
    .zip-code { color: var(--fg); font-weight: bold; }
    .zip-count { 
      color: var(--accent); 
      font-weight: bold; 
      background: rgba(255, 255, 0, 0.1);
      padding: 2px 6px;
      border-radius: 3px;
    }
    
    .button {
      background: transparent;
      border: 2px solid var(--fg);
      color: var(--fg);
      padding: 8px 16px;
      font-family: 'Courier New', monospace;
      font-size: 10px;
      cursor: pointer;
      text-transform: uppercase;
      letter-spacing: 1px;
      transition: all 0.3s;
      width: 100%;
      margin-top: 10px;
    }
    
    .button:hover {
      background: var(--fg);
      color: var(--bg);
    }
    
    .button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .loading {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: var(--bg);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
    }
    
    .loading-text {
      color: var(--fg);
      font-size: 16px;
      letter-spacing: 4px;
      animation: pulse 1.5s infinite;
    }
    
    @keyframes pulse {
      0%, 100% { opacity: 0.3; }
      50% { opacity: 1; }
    }
    
    .scan-line {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: var(--fg);
      box-shadow: 0 0 8px var(--fg);
      animation: scan 8s linear infinite;
      pointer-events: none;
      z-index: 1000;
    }
    
    @keyframes scan {
      0% { transform: translateY(0); }
      100% { transform: translateY(100vh); }
    }
    
    ::-webkit-scrollbar {
      width: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: var(--bg);
    }
    
    ::-webkit-scrollbar-thumb {
      background: var(--fg);
      border: 1px solid var(--bg);
    }
  </style>
</head>
<body>
  <div id="loading" class="loading">
    <div class="loading-text">INITIALIZING NETWORK MAP</div>
  </div>
  
  <div class="scan-line"></div>
  
  <div class="header">
    <h1>ZIP NETWORK // 5317 CHARLOTTE</h1>
    <div class="subtitle">KANSAS CITY STREET MAP // LIVE WEATHER RADAR</div>
  </div>
  
  <div class="intro-ticker">
    <div class="intro-ticker-content" id="introText">
      ‚ñ∏‚ñ∏‚ñ∏ LOADING... ‚ñ∏‚ñ∏‚ñ∏
    </div>
  </div>
  
  <div class="main-container">
    <div class="map-section">
      <div id="map"></div>
    </div>
    
    <div class="side-panel">
      <div class="control-section">
        <div class="control-title">‚ö° WEATHER RADAR</div>
        <div class="control-item">
          <label>
            <input type="checkbox" id="radarToggle" checked>
            ENABLE RADAR
          </label>
        </div>
        <div class="slider-container">
          <label>OPACITY: <span id="opacityValue">70%</span></label>
          <input type="range" id="radarOpacity" min="0" max="100" value="70">
        </div>
        <div class="control-item">
          <label>
            <input type="checkbox" id="linesToggle" checked>
            SHOW CONNECTIONS
          </label>
        </div>
        <button class="button" id="connectBtn">
          DRAW CONNECTIONS
        </button>
        <button class="button" id="clearBtn">
          CLEAR CONNECTIONS
        </button>
        <div class="radar-info">
          <div id="radarTimestamp">LOADING RADAR...</div>
        </div>
      </div>
      
      <div class="stats-panel">
        <div class="stat-row">
          <span class="stat-label">TARGET:</span>
          <span class="stat-value" id="targetCount">--</span>
        </div>
        <div class="stat-row">
          <span class="stat-label">TOTAL RESPONDENTS:</span>
          <span class="stat-value" id="totalRespondents">--</span>
        </div>
        <div class="stat-row">
          <span class="stat-label">UNIQUE ZIPS:</span>
          <span class="stat-value" id="totalZips">--</span>
        </div>
        <div class="stat-row">
          <span class="stat-label">CONNECTIONS:</span>
          <span class="stat-value" id="connectionCount">0</span>
        </div>
      </div>
      
      <div class="zip-list">
        <div class="list-title">üìç NETWORK NODES</div>
        <div id="zipListContainer"></div>
      </div>
    </div>
  </div>

  <script>
    var map;
    var radarLayer = null;
    var radarTimestamps = [];
    var markers = [];
    var connectionLines = [];
    var targetMarker = null;
    var zipData = null;
    var targetLatLng = null;

    function initMap() {
      map = L.map('map', {
        zoomControl: false
      }).setView([39.0997, -94.5786], 10);

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap',
        maxZoom: 19
      }).addTo(map);

      L.control.zoom({ position: 'bottomright' }).addTo(map);
      
      loadRadarData();
      setupControls();
    }

    function createCircleMarker(lat, lng, zip, count, isTarget) {
      var radius = isTarget ? 12 : (6 + count * 1.5);
      var color = isTarget ? '#f00' : '#0f0';
      
      var marker = L.circleMarker([lat, lng], {
        radius: radius,
        fillColor: color,
        fillOpacity: 0.8,
        color: '#fff',
        weight: 2
      }).addTo(map);
      
      var popupContent = '<div style="padding:5px;">' +
        '<div style="font-size:12px;font-weight:bold;margin-bottom:4px;color:' + color + ';">' +
        (isTarget ? 'üè† ' : 'üìç ') + zip +
        '</div>' +
        '<div style="font-size:10px;color:#ff0;">' +
        'RESPONSES: ' + count +
        '</div>' +
        '</div>';
      
      marker.bindPopup(popupContent);
      
      if (isTarget) {
        marker.bindTooltip(zip, {
          permanent: true,
          direction: 'bottom',
          offset: [0, radius + 5]
        });
      }
      
      return marker;
    }

    function clearConnections() {
      connectionLines.forEach(function(line) {
        map.removeLayer(line);
      });
      connectionLines = [];
      document.getElementById('connectionCount').textContent = '0';
      
      var btn = document.getElementById('connectBtn');
      btn.disabled = false;
      btn.style.opacity = '1';
    }

    function drawConnections() {
      clearConnections();
      
      if (!targetLatLng || !zipData || zipData.zips.length === 0) {
        return;
      }
      
      var btn = document.getElementById('connectBtn');
      btn.disabled = true;
      btn.style.opacity = '0.5';
      
      var count = 0;
      zipData.zips.forEach(function(z) {
        var line = L.polyline([
          [z.lat, z.lng],
          targetLatLng
        ], {
          color: '#0f0',
          weight: 2,
          opacity: 0.5
        }).addTo(map);
        
        connectionLines.push(line);
        count++;
      });
      
      document.getElementById('connectionCount').textContent = count;
      
      btn.disabled = false;
      btn.style.opacity = '1';
    }

    function zoomToZip(lat, lng) {
      map.setView([lat, lng], 13);
    }

    function loadRadarData() {
      fetch('https://api.rainviewer.com/public/weather-maps.json')
        .then(function(response) { return response.json(); })
        .then(function(data) {
          radarTimestamps = data.radar.past.concat(data.radar.nowcast);
          
          if (radarTimestamps.length > 0) {
            showRadarLayer(radarTimestamps[radarTimestamps.length - 1]);
            updateRadarTimestamp(radarTimestamps[radarTimestamps.length - 1].time);
          }
        })
        .catch(function(error) {
          console.error('Radar error:', error);
          document.getElementById('radarTimestamp').textContent = 'RADAR OFFLINE';
        });
    }

    function showRadarLayer(timestamp) {
      if (radarLayer) {
        map.removeLayer(radarLayer);
      }

      var opacity = parseFloat(document.getElementById('radarOpacity').value) / 100;
      
      radarLayer = L.tileLayer(
        'https://tilecache.rainviewer.com/v2/radar/' + timestamp.path + '/256/{z}/{x}/{y}/2/1_1.png',
        {
          opacity: opacity,
          zIndex: 500
        }
      ).addTo(map);
    }

    function updateRadarTimestamp(unixTime) {
      var date = new Date(unixTime * 1000);
      var timeString = date.toLocaleTimeString('en-US', { 
        hour: '2-digit', 
        minute: '2-digit'
      });
      document.getElementById('radarTimestamp').textContent = 'UPDATED: ' + timeString;
    }

    function setupControls() {
      document.getElementById('radarToggle').addEventListener('change', function(e) {
        if (e.target.checked) {
          if (radarTimestamps.length > 0) {
            showRadarLayer(radarTimestamps[radarTimestamps.length - 1]);
          }
        } else {
          if (radarLayer) {
            map.removeLayer(radarLayer);
            radarLayer = null;
          }
        }
      });

      document.getElementById('radarOpacity').addEventListener('input', function(e) {
        var opacity = e.target.value;
        document.getElementById('opacityValue').textContent = opacity + '%';
        
        if (radarLayer) {
          radarLayer.setOpacity(parseFloat(opacity) / 100);
        }
      });

      document.getElementById('linesToggle').addEventListener('change', function(e) {
        connectionLines.forEach(function(line) {
          if (e.target.checked) {
            line.addTo(map);
          } else {
            map.removeLayer(line);
          }
        });
      });

      document.getElementById('connectBtn').addEventListener('click', drawConnections);
      document.getElementById('clearBtn').addEventListener('click', clearConnections);

      setInterval(loadRadarData, 5 * 60 * 1000);
    }

    function loadData() {
      google.script.run
        .withSuccessHandler(function(data) {
          if (data.error) {
            document.getElementById('loading').innerHTML = 
              '<div class="loading-text" style="color:#f00;">ERROR</div>';
            return;
          }
          
          zipData = data;
          
          markers.forEach(function(m) { map.removeLayer(m); });
          markers = [];
          
          targetLatLng = [data.target.lat, data.target.lng];
          
          var targetDisplayName = data.target.displayName || '5317 CHARLOTTE';
          targetMarker = createCircleMarker(
            data.target.lat, 
            data.target.lng, 
            targetDisplayName, 
            data.target.count, 
            true
          );
          markers.push(targetMarker);
          
          map.setView(targetLatLng, 11);
          
          data.zips.forEach(function(z) {
            var marker = createCircleMarker(z.lat, z.lng, z.zip, z.count, false);
            markers.push(marker);
          });
          
          var sortedZips = data.zips.slice().sort(function(a, b) { return b.count - a.count; });
          
          document.getElementById('targetCount').textContent = data.target.count;
          document.getElementById('totalRespondents').textContent = data.totalRespondents;
          document.getElementById('totalZips').textContent = data.totalCount;
          
          var zipListHTML = '';
          
          zipListHTML += '<div class="zip-item target" data-lat="' + data.target.lat + '" data-lng="' + data.target.lng + '">' +
            '<span class="zip-code">' + targetDisplayName + '</span>' +
            '<span class="zip-count">' + data.target.count + '</span>' +
            '</div>';
          
          sortedZips.forEach(function(z) {
            zipListHTML += '<div class="zip-item" data-lat="' + z.lat + '" data-lng="' + z.lng + '">' +
              '<span class="zip-code">' + z.zip + '</span>' +
              '<span class="zip-count">' + z.count + '</span>' +
              '</div>';
          });
          
          document.getElementById('zipListContainer').innerHTML = zipListHTML;
          
          var zipItems = document.querySelectorAll('.zip-item');
          zipItems.forEach(function(item) {
            item.addEventListener('click', function() {
              var lat = parseFloat(this.getAttribute('data-lat'));
              var lng = parseFloat(this.getAttribute('data-lng'));
              zoomToZip(lat, lng);
            });
          });
          
          document.getElementById('loading').style.display = 'none';
        })
        .withFailureHandler(function(err) {
          document.getElementById('loading').innerHTML = 
            '<div class="loading-text" style="color:#f00;">ERROR</div>';
        })
        .getAllZipData();
    }

    function loadIntroText() {
      google.script.run
        .withSuccessHandler(function(text) {
          document.getElementById('introText').textContent = '‚ñ∏‚ñ∏‚ñ∏ ' + text.toUpperCase() + ' ‚ñ∏‚ñ∏‚ñ∏';
        })
        .withFailureHandler(function(err) {
          document.getElementById('introText').textContent = '‚ñ∏‚ñ∏‚ñ∏ INPUT TEXT HERE ‚ñ∏‚ñ∏‚ñ∏';
        })
        .getIntroText();
    }

    initMap();
    loadData();
    loadIntroText();
  </script>
</body>
</html>
